{"version":3,"sources":["components/Button.js","components/Header.js","components/Youtube.js","App.js","serviceWorker.js","index.js"],"names":["Button","href","this","props","link","type","className","name","Component","Header","src","alt","id","key","Youtube","title","ytlink","frameBorder","allow","allowFullScreen","samesite","Secure","App","state","zoomdata","font-weight","target","map","zoom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oyBAgBeA,E,uKAZf,OACA,6BACA,uBAAGC,KAAMC,KAAKC,MAAMC,MACjB,4BAAQC,KAAK,SACVC,UAAU,0BACZJ,KAAKC,MAAMI,OAGf,kC,GAVqBC,aC0BNC,E,uKAvBf,OACA,yBAAKH,UAAY,aACb,yBACAA,UAAU,0BACVI,IAAI,iCACJC,IAAI,WAEJ,6BACA,6BACA,wBAAIL,UAAU,eAAd,oDACA,6BACA,2RACA,6BACA,kBAAC,EAAD,CACGM,GAAG,gBACHC,IAAI,gBACJN,KAAK,oCACLH,KAAK,4D,GAnBSI,aCWNM,G,4KATf,OACA,yBAAKR,UAAU,UACX,4BAAQS,MAAOb,KAAKC,MAAMI,KAAMG,IAAKR,KAAKC,MAAMa,OAAQC,YAAY,IAAIC,MAAM,0EAA0EC,iBAAe,EACvKC,SAAS,OAAOC,QAAM,S,GALJb,c,OCkEPc,E,4MA7DbC,MAAQ,CACNC,Y,uDAIF,OACE,yBAAKlB,UAAU,iCACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,OAEA,6BACA,wBAAIA,UAAU,eACd,4GAGA,6BACA,kBAAC,EAAD,CACAC,KAAK,yDACLS,OAAO,uCAEP,6BACA,yBAAKV,UAAY,OACjB,yBAAKA,UAAY,OACjB,uEACA,wBAAIA,UAAU,eACd,yUAA8S,uBAAGL,KAAK,yCAAyCwB,cAAY,SAASC,OAAO,UAA7E,yBAC9S,6BACA,6BAFA,+EAG4E,uBAAGzB,KAAK,6CAAR,sCAH5E,iJAOA,6BACE,yBAAKK,UAAU,6BACZkB,EAASG,KAAI,SAAAC,GAAI,OAClB,yBAAKf,IAAKe,EAAKhB,IACf,kBAAC,EAAD,CACAA,GAAIgB,EAAKhB,GACTC,IAAKe,EAAKhB,GACVL,KAAMqB,EAAKrB,KACXH,KAAMwB,EAAKxB,YAKf,6BACE,6EACA,uBAAGH,KAAK,iEAAiEyB,OAAS,UAClF,4BAAQpB,UAAU,yBAAlB,6BAGA,6BACA,6BACA,mC,GAtDUE,aCKEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8a018d6f.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Button extends Component {\nrender(){\nreturn (\n<div>\n<a href={this.props.link}>\n   <button type=\"button\"\n      className=\"btn btn-primary btn-lg\">\n   {this.props.name}\n   </button>\n</a>\n<hr />\n</div>\n)} \n}\nexport default Button;","import React, { Component } from 'react';\nimport Button from './Button'\n\nclass Header extends Component {\nrender(){    \nreturn (\n<div className = \"container\"> \n    <img \n    className=\"img-fluid img-thumbnail\"\n    src=\"./assets/CR-logo-hrz-color.png\" \n    alt=\"CRlogo\"       \n    />\n    <br />\n    <br />\n    <h1 className=\"text-center\">First Baptist Orlando's Online Open Share Groups</h1>\n    <br />\n    <h4>Please note: These groups are open for all who have been thru our Newcomers 101 orentation here at FBOCR.  If you are new to CR at First Orlando, please complete this short form and a member of our team will schedule a Newcomers 101 session with you! </h4>\n    <br />\n    <Button \n       id=\"Newcomers 101\"\n       key=\"Newcomers 101\"\n       name=\"Request Newcomers 101 Orientation\"\n       link=\"https://fbocr.churchcenter.com/people/forms/117331\"\n    />\n</div>\n)}\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Youtube extends Component {\nrender(){\nreturn (\n<div className=\"iframe\"> \n    <iframe title={this.props.name} src={this.props.ytlink} frameBorder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen\n    samesite=\"None\" Secure>\n    </iframe>\n</div>\n)}\n}\n\nexport default Youtube;","import React, { Component }  from 'react';\nimport Header from './components/Header';\nimport Button from './components/Button';\nimport Youtube from './components/Youtube';\nimport './App.css';\nimport zoomdata from './zoomdata.json';\n\nclass App extends Component {\n  state = {\n    zoomdata\n  };  \n\n  render() {\n  return (\n    <div className=\"App container container-fluid\">\n      <header className=\"App-header\">\n      <Header />\n      </header>\n      <hr />\n      <h2 className=\"text-center\">\n      <span>This week's video: \n      Cheryl Luke: Learn the unforced rhythms of God's Grace</span>   \n      </h2>  \n      <br />   \n      <Youtube \n      name=\"Cheryl Luke: Learn the unforced rhythms of God's Grace\"\n      ytlink=\"https://youtu.be/VcvptyIBYwk?t=502\"\n      /> \n      <hr />\n      <div className = \"row\">\n      <div className = \"col\">\n      <h2>Open Share Groups - Start at 7:30pm EST</h2>\n      <h6 className=\"text-center\">\n      <span>These rooms will open at 7:30pm on Tuesday nights beginning 3/25/2020.  The group host will go over guidelines that must be followed at ALL times.  The group host has been asked to strictly enforce these guidelines for the safety of the entire group.  You can read more about these guidelines at <a href=\"https://www.celebraterecovery.com/crcr\" font-weight=\"strong\" target=\"_blank\">CelebrateRecovery.com</a>\n      <br />\n      <br />\n      A password is required to access the room - if you do not have one, contact <a href=\"mailto:celebraterecovery@firstorlando.com\">celebraterecovery@firstorlando.com</a>.  Please note that all participants are required to complete Newcomers 101 orientation before joining an online FBOCR open share group!  </span>   \n      </h6>\n      </div>\n      </div>\n      <hr />\n        <div className=\"container container-fluid\">\n          {zoomdata.map(zoom => (\n          <div key={zoom.id}>  \n          <Button  \n          id={zoom.id}\n          key={zoom.id}\n          name={zoom.name}\n          link={zoom.link}\n          />\n          </div>\n          ))}  \n        </div>\n      <div>\n        <h4>New to Zoom?  Looking for some tech pointers?</h4>\n        <a href=\"https://www.celebraterecovery.com/crcr/95-crcr/224-zoom-videos\" target = \"_blank\">\n        <button className=\"btn btn-danger btn-lg\">\n        An overview of Zoom & CR\n        </button></a>\n        <br />\n        <br />\n        <br />\n      </div>\n    </div>\n\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}