{"version":3,"sources":["components/Button.js","components/Header.js","components/Youtube.js","components/Youtube2.js","App.js","serviceWorker.js","index.js"],"names":["Button","href","this","props","link","type","className","name","Component","Header","src","alt","id","key","App","state","zoomdata","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"s1BAgBeA,E,uKAZf,OACA,6BACA,uBAAGC,KAAMC,KAAKC,MAAMC,MACjB,4BAAQC,KAAK,SACVC,UAAU,0BACZJ,KAAKC,MAAMI,OAGf,kC,GAVqBC,aC2BNC,E,uKAxBf,OACA,yBAAKH,UAAY,aACb,yBACAA,UAAU,0BACVI,IAAI,iCACJC,IAAI,WAEJ,6BACA,6BACA,wBAAIL,UAAU,eAAd,oDACA,6BACA,4HAEA,6BACA,kBAAC,EAAD,CACGM,GAAG,WACHC,IAAI,WACJN,KAAK,iCACLH,KAAK,0C,GApBSI,a,QCACA,YCACA,Y,MCuBRM,E,4MAjBbC,MAAQ,CACNC,Y,uDAIF,OACE,yBAAKV,UAAU,iCACb,kBAAC,EAAD,MAEE,6BACA,kC,GAXUE,aCIES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2154aa3d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Button extends Component {\nrender(){\nreturn (\n<div>\n<a href={this.props.link}>\n   <button type=\"button\"\n      className=\"btn btn-primary btn-lg\">\n   {this.props.name}\n   </button>\n</a>\n<hr />\n</div>\n)} \n}\nexport default Button;","import React, { Component } from 'react';\nimport Button from './Button'\n\nclass Header extends Component {\nrender(){    \nreturn (\n<div className = \"container\"> \n    <img \n    className=\"img-fluid img-thumbnail\"\n    src=\"./assets/CR-logo-hrz-color.png\" \n    alt=\"CRlogo\"       \n    />\n    <br />\n    <br />\n    <h1 className=\"text-center\">First Baptist Orlando's Online Open Share Groups</h1>\n    <br />\n    <h4>ALL FBO CR Online Groups Have Moved to the new website!  \n    Click button below to be redirected.</h4>\n    <br />\n    <Button \n       id=\"New Site\"\n       key=\"New Site\"\n       name=\"visit firstorlandorecovery.com\"\n       link=\"https://firstorlandorecovery.com\"\n    />\n</div>\n)}\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Youtube extends Component {\nrender(){\nreturn (\n<div className=\"iframe\"> \n<iframe width=\"auto\" height=\"auto\" src=\"https://www.youtube.com/embed/EmcK5vY12sY?start=613\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n)}\n}\n\nexport default Youtube;","import React, { Component } from 'react';\nimport '../App.css';\n\nclass Youtube2 extends Component {\nrender(){\nreturn (\n<div className=\"iframe\"> \n<iframe width=\"auto\" height=\"auto\" src=\"https://www.youtube.com/embed/ChJp9fdWJP0\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n</div>\n)}\n}\n\nexport default Youtube2;","import React, { Component }  from 'react';\nimport Header from './components/Header';\nimport Button from './components/Button';\nimport Youtube from './components/Youtube';\nimport Youtube2 from './components/Youtube2';\nimport './App.css';\nimport zoomdata from './zoomdata.json';\n\nclass App extends Component {\n  state = {\n    zoomdata\n  };  \n\n  render() {\n  return (\n    <div className=\"App container container-fluid\">\n      <Header />\n      \n        <br />\n        <br />\n    </div>\n\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}